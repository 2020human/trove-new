#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2011 OpenStack Foundation
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import gettext
import optparse
import os
import sys


gettext.install('reddwarf', unicode=1)


# If ../reddwarf/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
    os.pardir,
    os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'reddwarf', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from reddwarf.common import cfg
from oslo.config import cfg as openstack_cfg
from reddwarf.openstack.common import log as logging
from reddwarf.common import wsgi
from reddwarf.db import get_db_api

extra_opts = [
    openstack_cfg.BoolOpt('fork',
               short='f',
               default=False,
               dest='fork'),
    openstack_cfg.StrOpt('pid-file',
               default='.pid'),
    openstack_cfg.StrOpt('override-logfile',
               default=None),
]

CONF = cfg.CONF
CONF.register_cli_opts(extra_opts)


def run_server():
    try:
        get_db_api().configure_db(CONF)
        conf_file = CONF.find_file(CONF.api_paste_config)
        launcher = wsgi.launch('reddwarf', CONF.bind_port or 8779, conf_file)



        launcher.wait()
    except RuntimeError as error:
        import traceback
        print traceback.format_exc()
        sys.exit("ERROR: %s" % error)


if __name__ == '__main__':
    cfg.parse_args(sys.argv)
    if CONF.override_logfile:
        CONF.use_stderr = False
        CONF.log_file = CONF.override_logfile

    logging.setup(None)

    if CONF.fork:
        pid = os.fork()
        if pid == 0:
            run_server()
        else:
            print("Starting server:%s" % pid)
            pid_file = CONF.pid_file
            with open(pid_file, 'w') as f:
                f.write(str(pid))
    else:
        run_server()


#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2011 OpenStack Foundation
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

import eventlet
eventlet.monkey_patch()

import gettext
import optparse
import os
import socket
import sys


gettext.install('trove', unicode=1)

# If ../trove/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                os.pardir,
                                                os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'trove', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from trove.common import cfg
from trove.common import rpc
from oslo.config import cfg as openstack_cfg
from trove.openstack.common import log as logging
from trove.openstack.common import service
from trove.db import get_db_api

CONF = cfg.CONF
CONF.register_opts([openstack_cfg.StrOpt('guestagent_manager'),
                    openstack_cfg.StrOpt('guest_id')])

if __name__ == '__main__':
    cfg.parse_args(sys.argv)
    from trove.guestagent import dbaas
    logging.setup(None)

    try:
        get_db_api().configure_db(CONF)
        manager = dbaas.service_registry().get(CONF.service_type)
        if not manager:
            msg = "Manager not found for service type " + CONF.service_type
            raise RuntimeError(msg)
        server = rpc.RpcService(manager=manager, host=CONF.guest_id)
        launcher = service.launch(server)
        launcher.wait()
    except RuntimeError as error:
        import traceback
        print traceback.format_exc()
        sys.exit("ERROR: %s" % error)
